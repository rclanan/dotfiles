# === TMUX CONFIGURATION FOR RUSTDESK REMOTE DEVELOPMENT ===

# Set default terminal to support true color and proper escape sequences
set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",*256col*:Tc"

# Fix for ANSI escape sequence handling
set -ga terminal-overrides ",xterm*:XT:Ms=\\E]52;c;%p2%s\\007"

# Enable mouse support for easier remote navigation
set -g mouse on

# Increase scrollback buffer size
set -g history-limit 10000

# Set escape time to 0 for better responsiveness over remote connections
set -sg escape-time 0

# Renumber windows automatically when one is closed
set -g renumber-windows on

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1

# === KEY BINDINGS ===

# Change prefix key to Ctrl-a (easier for remote access)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Reload config with r
bind r source-file ~/.tmux.conf \; display "Config reloaded!"

# Split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# Switch panes using Alt-arrow without prefix (good for remote use)
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# === VISUAL SETTINGS FOR REMOTE CLARITY ===

# Status bar styling
set -g status-bg colour234
set -g status-fg colour137
set -g status-left-length 20
set -g status-right-length 50
set -g status-left '#[fg=colour233,bg=colour241,bold] #S #[fg=colour241,bg=colour235,nobold]'
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '

# Window status styling
setw -g window-status-current-style 'fg=colour1 bg=colour19 bold'
setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
setw -g window-status-style 'fg=colour9 bg=colour18'
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

# Pane border colors
set -g pane-border-style 'fg=colour238'
set -g pane-active-border-style 'fg=colour51'

# === SAAS PLATFORM DEVELOPMENT SESSION ===
# Note: Update paths below if project structure changes

# === DEVELOPMENT SESSION SETUP ===
# Only create saas-dev session if we're not already in tmux and it doesn't exist
# This prevents duplicate session errors when running 'tmux' from within tmux

# Simplified session management
# Create session and set up windows (always try to create/attach)

# Kill any existing saas-dev session first
run-shell "tmux kill-session -t saas-dev 2>/dev/null || true"

# Create new session
new-session -d -s 'saas-dev' -c '/home/rclanan/dev/projects/work/saas-platform'

# Set up main window
rename-window 'main'
send-keys 'pwd' C-m
send-keys 'ls' C-m

# Create all other windows
new-window -n 'backend'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/backend" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/backend"; echo "Backend Services"; else echo "Backend directory not found"; fi' C-m

new-window -n 'frontend'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/frontend" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/frontend"; echo "Frontend Application"; else echo "Frontend directory not found"; fi' C-m

new-window -n 'ai'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/ai" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/ai"; echo "AI Components"; else echo "AI directory not found"; fi' C-m

new-window -n 'gateway'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/platform-gateway" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/platform-gateway"; echo "Platform Gateway"; else echo "Gateway directory not found"; fi' C-m

new-window -n 'tools'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/tools" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/tools"; echo "Development Tools"; else echo "Tools directory not found"; fi' C-m

new-window -n 'docker'
send-keys 'cd /home/rclanan/dev/projects/work/saas-platform 2>/dev/null || echo "Project directory not found"' C-m
send-keys 'echo "Docker Services - Use ./start-platform-buildkit.sh"' C-m

new-window -n 'e2e'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/e2e-tests" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/e2e-tests"; echo "E2E Tests"; else echo "E2E directory not found"; fi' C-m

new-window -n 'unified'
send-keys 'if [ -d "/home/rclanan/dev/projects/work/saas-platform/apps/unified" ]; then cd "/home/rclanan/dev/projects/work/saas-platform/apps/unified"; echo "Unified Components"; else echo "Unified directory not found"; fi' C-m

# Select main window
select-window -t 'main'

# === COPY MODE SETTINGS (useful for remote sessions) ===

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Copy mode bindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# === TMUX PLUGIN MANAGER ===
# Install TPM if not present: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'christoomey/vim-tmux-navigator'

# Plugin configurations
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'
set -g @yank_selection_mouse 'clipboard'

# Initialize TMUX plugin manager (keep this line at the very bottom)
run '~/.tmux/plugins/tpm/tpm'